<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="com.springdemo.mapping.userMapper"就是com.springdemo.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.yeck.springboot2.Mapper.infoMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="com.springdemo.model.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->

    <!-- 根据_key查询得到一个user对象-->
    <select id="getStudents" parameterType="String"
            resultType="entity.InfoBack1"> <!-- 创建对应user实体类的位置 -->
        select * from students
    </select>

    <insert id="addStudents" parameterType="net.minidev.json.JSONObject">
        INSERT INTO students(`name`, `type`, `age`, `sex`, `idNo`, `Sclass`) VALUES (#{name}, #{type}, #{age}, #{sex}, #{idNo}, #{Sclass});
    </insert>

    <update id="editStudent" parameterType="net.minidev.json.JSONObject">
        update students set `name` = #{name}, `type` = #{type}, `age` = #{age}, `sex` = #{sex}, `idNo` = #{idNo}, `Sclass` = #{Sclass} where `_id` = #{_id}
    </update>

    <delete id="delStudent" parameterType="net.minidev.json.JSONObject">
        delete from students where _id = #{_id}
    </delete>

    <select id="filterStudent" parameterType="net.minidev.json.JSONObject" resultType="entity.InfoBack1">
        select * from students where `name` like #{name} and `type` like #{type} and `age` like #{age} and `sex` like #{sex} and `idNo` like #{idNo} and `Sclass` like #{Sclass}
    </select>
</mapper>